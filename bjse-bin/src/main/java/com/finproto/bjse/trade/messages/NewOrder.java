// Code generated by fin-protoc. DO NOT EDIT.
package com.finproto.bjse.trade.messages;

import com.finproto.codec.BinaryCodec;
import io.netty.buffer.ByteBuf;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.Supplier;

public class NewOrder implements BinaryCodec {
  private String applId;
  private String submittingPbuid;
  private String securityId;
  private String securityIdsource;
  private short ownerType;
  private String clearingFirm;
  private long transactTime;
  private String userInfo;
  private String clOrdId;
  private String accountId;
  private String branchId;
  private String orderRestrictions;
  private String side;
  private String ordType;
  private long orderQty;
  private long price;
  private BinaryCodec applExtend;

  public String getApplId() {
    return this.applId;
  }

  public void setApplId(String applId) {
    this.applId = applId;
  }

  public String getSubmittingPbuid() {
    return this.submittingPbuid;
  }

  public void setSubmittingPbuid(String submittingPbuid) {
    this.submittingPbuid = submittingPbuid;
  }

  public String getSecurityId() {
    return this.securityId;
  }

  public void setSecurityId(String securityId) {
    this.securityId = securityId;
  }

  public String getSecurityIdsource() {
    return this.securityIdsource;
  }

  public void setSecurityIdsource(String securityIdsource) {
    this.securityIdsource = securityIdsource;
  }

  public short getOwnerType() {
    return this.ownerType;
  }

  public void setOwnerType(short ownerType) {
    this.ownerType = ownerType;
  }

  public String getClearingFirm() {
    return this.clearingFirm;
  }

  public void setClearingFirm(String clearingFirm) {
    this.clearingFirm = clearingFirm;
  }

  public long getTransactTime() {
    return this.transactTime;
  }

  public void setTransactTime(long transactTime) {
    this.transactTime = transactTime;
  }

  public String getUserInfo() {
    return this.userInfo;
  }

  public void setUserInfo(String userInfo) {
    this.userInfo = userInfo;
  }

  public String getClOrdId() {
    return this.clOrdId;
  }

  public void setClOrdId(String clOrdId) {
    this.clOrdId = clOrdId;
  }

  public String getAccountId() {
    return this.accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public String getBranchId() {
    return this.branchId;
  }

  public void setBranchId(String branchId) {
    this.branchId = branchId;
  }

  public String getOrderRestrictions() {
    return this.orderRestrictions;
  }

  public void setOrderRestrictions(String orderRestrictions) {
    this.orderRestrictions = orderRestrictions;
  }

  public String getSide() {
    return this.side;
  }

  public void setSide(String side) {
    this.side = side;
  }

  public String getOrdType() {
    return this.ordType;
  }

  public void setOrdType(String ordType) {
    this.ordType = ordType;
  }

  public long getOrderQty() {
    return this.orderQty;
  }

  public void setOrderQty(long orderQty) {
    this.orderQty = orderQty;
  }

  public long getPrice() {
    return this.price;
  }

  public void setPrice(long price) {
    this.price = price;
  }

  public BinaryCodec getApplExtend() {
    return this.applExtend;
  }

  public void setApplExtend(BinaryCodec applExtend) {
    this.applExtend = applExtend;
  }

  @Override
  public void encode(ByteBuf byteBuf) {
    writeFixedString(byteBuf, this.applId, 3);
    writeFixedString(byteBuf, this.submittingPbuid, 6);
    writeFixedString(byteBuf, this.securityId, 8);
    writeFixedString(byteBuf, this.securityIdsource, 4);
    byteBuf.writeShortLE(this.ownerType);
    writeFixedString(byteBuf, this.clearingFirm, 2);
    byteBuf.writeLongLE(this.transactTime);
    writeFixedString(byteBuf, this.userInfo, 32);
    writeFixedString(byteBuf, this.clOrdId, 10);
    writeFixedString(byteBuf, this.accountId, 10);
    writeFixedString(byteBuf, this.branchId, 2);
    writeFixedString(byteBuf, this.orderRestrictions, 4);
    writeFixedString(byteBuf, this.side, 1);
    writeFixedString(byteBuf, this.ordType, 1);
    byteBuf.writeLongLE(this.orderQty);
    byteBuf.writeLongLE(this.price);
    if (null != this.applExtend) {
      this.applExtend.encode(byteBuf);
    }
  }

  @Override
  public void decode(ByteBuf byteBuf) {
    this.applId = readFixedString(byteBuf, 3);
    this.submittingPbuid = readFixedString(byteBuf, 6);
    this.securityId = readFixedString(byteBuf, 8);
    this.securityIdsource = readFixedString(byteBuf, 4);
    this.ownerType = byteBuf.readShortLE();
    this.clearingFirm = readFixedString(byteBuf, 2);
    this.transactTime = byteBuf.readLongLE();
    this.userInfo = readFixedString(byteBuf, 32);
    this.clOrdId = readFixedString(byteBuf, 10);
    this.accountId = readFixedString(byteBuf, 10);
    this.branchId = readFixedString(byteBuf, 2);
    this.orderRestrictions = readFixedString(byteBuf, 4);
    this.side = readFixedString(byteBuf, 1);
    this.ordType = readFixedString(byteBuf, 1);
    this.orderQty = byteBuf.readLongLE();
    this.price = byteBuf.readLongLE();
    this.applExtend = ApplExtendMessageFactory.getInstance().create(this.applId);
    this.applExtend.decode(byteBuf);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        applId,
        submittingPbuid,
        securityId,
        securityIdsource,
        ownerType,
        clearingFirm,
        transactTime,
        userInfo,
        clOrdId,
        accountId,
        branchId,
        orderRestrictions,
        side,
        ordType,
        orderQty,
        price,
        applExtend);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (null == obj || getClass() != obj.getClass()) {
      return false;
    }
    NewOrder orther_ = (NewOrder) obj;
    return Objects.equals(applId, orther_.applId)
        && Objects.equals(submittingPbuid, orther_.submittingPbuid)
        && Objects.equals(securityId, orther_.securityId)
        && Objects.equals(securityIdsource, orther_.securityIdsource)
        && Objects.equals(ownerType, orther_.ownerType)
        && Objects.equals(clearingFirm, orther_.clearingFirm)
        && Objects.equals(transactTime, orther_.transactTime)
        && Objects.equals(userInfo, orther_.userInfo)
        && Objects.equals(clOrdId, orther_.clOrdId)
        && Objects.equals(accountId, orther_.accountId)
        && Objects.equals(branchId, orther_.branchId)
        && Objects.equals(orderRestrictions, orther_.orderRestrictions)
        && Objects.equals(side, orther_.side)
        && Objects.equals(ordType, orther_.ordType)
        && Objects.equals(orderQty, orther_.orderQty)
        && Objects.equals(price, orther_.price)
        && Objects.equals(applExtend, orther_.applExtend);
  }

  @Override
  public String toString() {
    return "NewOrder ["
        + "applId="
        + this.applId
        + ", submittingPbuid="
        + this.submittingPbuid
        + ", securityId="
        + this.securityId
        + ", securityIdsource="
        + this.securityIdsource
        + ", ownerType="
        + this.ownerType
        + ", clearingFirm="
        + this.clearingFirm
        + ", transactTime="
        + this.transactTime
        + ", userInfo="
        + this.userInfo
        + ", clOrdId="
        + this.clOrdId
        + ", accountId="
        + this.accountId
        + ", branchId="
        + this.branchId
        + ", orderRestrictions="
        + this.orderRestrictions
        + ", side="
        + this.side
        + ", ordType="
        + this.ordType
        + ", orderQty="
        + this.orderQty
        + ", price="
        + this.price
        + ", applExtend="
        + this.applExtend
        + "]";
  }

  public static enum ApplExtendMessageFactory {
    INSTANCE;
    private final Map<String, Supplier<BinaryCodec>> applExtendMap = new HashMap<>();

    static {
      getInstance().register("010", ExtendNewOrder010::new);
      getInstance().register("040", ExtendNewOrder040::new);
      getInstance().register("041", ExtendNewOrder041::new);
      getInstance().register("042", ExtendNewOrder042::new);
      getInstance().register("043", ExtendNewOrder043::new);
      getInstance().register("044", ExtendNewOrder044::new);
      getInstance().register("045", ExtendNewOrder045::new);
      getInstance().register("050", ExtendNewOrder050::new);
    }

    public BinaryCodec create(String applId) {
      Supplier<BinaryCodec> supplier = applExtendMap.get(applId);
      if (null == supplier) {
        throw new IllegalArgumentException("Unsupported ApplID:" + applId);
      }
      return supplier.get();
    }

    public void register(String applId, Supplier<BinaryCodec> supplier) {
      applExtendMap.put(applId, supplier);
    }

    public boolean remove(String applId) {
      return null != applExtendMap.remove(applId);
    }

    public static ApplExtendMessageFactory getInstance() {
      return INSTANCE;
    }
  }
}
