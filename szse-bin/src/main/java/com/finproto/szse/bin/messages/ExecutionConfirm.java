// Code generated by fin-protoc. DO NOT EDIT.
package com.finproto.szse.bin.messages;

import com.finproto.codec.BinaryCodec;
import io.netty.buffer.ByteBuf;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.Supplier;

public class ExecutionConfirm implements BinaryCodec {
  private int partitionNo;
  private long reportIndex;
  private String applId;
  private String reportingPbuid;
  private String submittingPbuid;
  private String securityId;
  private String securityIdsource;
  private short ownerType;
  private String clearingFirm;
  private long transactTime;
  private String userInfo;
  private String orderId;
  private String clOrdId;
  private String quoteMsgId;
  private String origClOrdId;
  private String execId;
  private String execType;
  private String ordStatus;
  private short ordRejReason;
  private long leavesQty;
  private long cumQty;
  private String side;
  private String ordType;
  private long orderQty;
  private long price;
  private String accountId;
  private String branchId;
  private String orderRestrictions;
  private BinaryCodec applExtend;

  public int getPartitionNo() {
    return this.partitionNo;
  }

  public void setPartitionNo(int partitionNo) {
    this.partitionNo = partitionNo;
  }

  public long getReportIndex() {
    return this.reportIndex;
  }

  public void setReportIndex(long reportIndex) {
    this.reportIndex = reportIndex;
  }

  public String getApplId() {
    return this.applId;
  }

  public void setApplId(String applId) {
    this.applId = applId;
  }

  public String getReportingPbuid() {
    return this.reportingPbuid;
  }

  public void setReportingPbuid(String reportingPbuid) {
    this.reportingPbuid = reportingPbuid;
  }

  public String getSubmittingPbuid() {
    return this.submittingPbuid;
  }

  public void setSubmittingPbuid(String submittingPbuid) {
    this.submittingPbuid = submittingPbuid;
  }

  public String getSecurityId() {
    return this.securityId;
  }

  public void setSecurityId(String securityId) {
    this.securityId = securityId;
  }

  public String getSecurityIdsource() {
    return this.securityIdsource;
  }

  public void setSecurityIdsource(String securityIdsource) {
    this.securityIdsource = securityIdsource;
  }

  public short getOwnerType() {
    return this.ownerType;
  }

  public void setOwnerType(short ownerType) {
    this.ownerType = ownerType;
  }

  public String getClearingFirm() {
    return this.clearingFirm;
  }

  public void setClearingFirm(String clearingFirm) {
    this.clearingFirm = clearingFirm;
  }

  public long getTransactTime() {
    return this.transactTime;
  }

  public void setTransactTime(long transactTime) {
    this.transactTime = transactTime;
  }

  public String getUserInfo() {
    return this.userInfo;
  }

  public void setUserInfo(String userInfo) {
    this.userInfo = userInfo;
  }

  public String getOrderId() {
    return this.orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }

  public String getClOrdId() {
    return this.clOrdId;
  }

  public void setClOrdId(String clOrdId) {
    this.clOrdId = clOrdId;
  }

  public String getQuoteMsgId() {
    return this.quoteMsgId;
  }

  public void setQuoteMsgId(String quoteMsgId) {
    this.quoteMsgId = quoteMsgId;
  }

  public String getOrigClOrdId() {
    return this.origClOrdId;
  }

  public void setOrigClOrdId(String origClOrdId) {
    this.origClOrdId = origClOrdId;
  }

  public String getExecId() {
    return this.execId;
  }

  public void setExecId(String execId) {
    this.execId = execId;
  }

  public String getExecType() {
    return this.execType;
  }

  public void setExecType(String execType) {
    this.execType = execType;
  }

  public String getOrdStatus() {
    return this.ordStatus;
  }

  public void setOrdStatus(String ordStatus) {
    this.ordStatus = ordStatus;
  }

  public short getOrdRejReason() {
    return this.ordRejReason;
  }

  public void setOrdRejReason(short ordRejReason) {
    this.ordRejReason = ordRejReason;
  }

  public long getLeavesQty() {
    return this.leavesQty;
  }

  public void setLeavesQty(long leavesQty) {
    this.leavesQty = leavesQty;
  }

  public long getCumQty() {
    return this.cumQty;
  }

  public void setCumQty(long cumQty) {
    this.cumQty = cumQty;
  }

  public String getSide() {
    return this.side;
  }

  public void setSide(String side) {
    this.side = side;
  }

  public String getOrdType() {
    return this.ordType;
  }

  public void setOrdType(String ordType) {
    this.ordType = ordType;
  }

  public long getOrderQty() {
    return this.orderQty;
  }

  public void setOrderQty(long orderQty) {
    this.orderQty = orderQty;
  }

  public long getPrice() {
    return this.price;
  }

  public void setPrice(long price) {
    this.price = price;
  }

  public String getAccountId() {
    return this.accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public String getBranchId() {
    return this.branchId;
  }

  public void setBranchId(String branchId) {
    this.branchId = branchId;
  }

  public String getOrderRestrictions() {
    return this.orderRestrictions;
  }

  public void setOrderRestrictions(String orderRestrictions) {
    this.orderRestrictions = orderRestrictions;
  }

  public BinaryCodec getApplExtend() {
    return this.applExtend;
  }

  public void setApplExtend(BinaryCodec applExtend) {
    this.applExtend = applExtend;
  }

  @Override
  public void encode(ByteBuf byteBuf) {
    byteBuf.writeInt(this.partitionNo);
    byteBuf.writeLong(this.reportIndex);
    writeFixedString(byteBuf, this.applId, 3);
    writeFixedString(byteBuf, this.reportingPbuid, 6);
    writeFixedString(byteBuf, this.submittingPbuid, 6);
    writeFixedString(byteBuf, this.securityId, 8);
    writeFixedString(byteBuf, this.securityIdsource, 4);
    byteBuf.writeShort(this.ownerType);
    writeFixedString(byteBuf, this.clearingFirm, 2);
    byteBuf.writeLong(this.transactTime);
    writeFixedString(byteBuf, this.userInfo, 8);
    writeFixedString(byteBuf, this.orderId, 16);
    writeFixedString(byteBuf, this.clOrdId, 10);
    writeFixedString(byteBuf, this.quoteMsgId, 10);
    writeFixedString(byteBuf, this.origClOrdId, 10);
    writeFixedString(byteBuf, this.execId, 16);
    writeFixedString(byteBuf, this.execType, 1);
    writeFixedString(byteBuf, this.ordStatus, 1);
    byteBuf.writeShort(this.ordRejReason);
    byteBuf.writeLong(this.leavesQty);
    byteBuf.writeLong(this.cumQty);
    writeFixedString(byteBuf, this.side, 1);
    writeFixedString(byteBuf, this.ordType, 1);
    byteBuf.writeLong(this.orderQty);
    byteBuf.writeLong(this.price);
    writeFixedString(byteBuf, this.accountId, 12);
    writeFixedString(byteBuf, this.branchId, 4);
    writeFixedString(byteBuf, this.orderRestrictions, 4);
    if (null != this.applExtend) {
      this.applExtend.encode(byteBuf);
    }
  }

  @Override
  public void decode(ByteBuf byteBuf) {
    this.partitionNo = byteBuf.readInt();
    this.reportIndex = byteBuf.readLong();
    this.applId = readFixedString(byteBuf, 3);
    this.reportingPbuid = readFixedString(byteBuf, 6);
    this.submittingPbuid = readFixedString(byteBuf, 6);
    this.securityId = readFixedString(byteBuf, 8);
    this.securityIdsource = readFixedString(byteBuf, 4);
    this.ownerType = byteBuf.readShort();
    this.clearingFirm = readFixedString(byteBuf, 2);
    this.transactTime = byteBuf.readLong();
    this.userInfo = readFixedString(byteBuf, 8);
    this.orderId = readFixedString(byteBuf, 16);
    this.clOrdId = readFixedString(byteBuf, 10);
    this.quoteMsgId = readFixedString(byteBuf, 10);
    this.origClOrdId = readFixedString(byteBuf, 10);
    this.execId = readFixedString(byteBuf, 16);
    this.execType = readFixedString(byteBuf, 1);
    this.ordStatus = readFixedString(byteBuf, 1);
    this.ordRejReason = byteBuf.readShort();
    this.leavesQty = byteBuf.readLong();
    this.cumQty = byteBuf.readLong();
    this.side = readFixedString(byteBuf, 1);
    this.ordType = readFixedString(byteBuf, 1);
    this.orderQty = byteBuf.readLong();
    this.price = byteBuf.readLong();
    this.accountId = readFixedString(byteBuf, 12);
    this.branchId = readFixedString(byteBuf, 4);
    this.orderRestrictions = readFixedString(byteBuf, 4);
    this.applExtend = ApplExtendMessageFactory.getInstance().create(this.applId);
    this.applExtend.decode(byteBuf);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        partitionNo,
        reportIndex,
        applId,
        reportingPbuid,
        submittingPbuid,
        securityId,
        securityIdsource,
        ownerType,
        clearingFirm,
        transactTime,
        userInfo,
        orderId,
        clOrdId,
        quoteMsgId,
        origClOrdId,
        execId,
        execType,
        ordStatus,
        ordRejReason,
        leavesQty,
        cumQty,
        side,
        ordType,
        orderQty,
        price,
        accountId,
        branchId,
        orderRestrictions,
        applExtend);
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (null == obj || getClass() != obj.getClass()) {
      return false;
    }
    ExecutionConfirm orther_ = (ExecutionConfirm) obj;
    return Objects.equals(partitionNo, orther_.partitionNo)
        && Objects.equals(reportIndex, orther_.reportIndex)
        && Objects.equals(applId, orther_.applId)
        && Objects.equals(reportingPbuid, orther_.reportingPbuid)
        && Objects.equals(submittingPbuid, orther_.submittingPbuid)
        && Objects.equals(securityId, orther_.securityId)
        && Objects.equals(securityIdsource, orther_.securityIdsource)
        && Objects.equals(ownerType, orther_.ownerType)
        && Objects.equals(clearingFirm, orther_.clearingFirm)
        && Objects.equals(transactTime, orther_.transactTime)
        && Objects.equals(userInfo, orther_.userInfo)
        && Objects.equals(orderId, orther_.orderId)
        && Objects.equals(clOrdId, orther_.clOrdId)
        && Objects.equals(quoteMsgId, orther_.quoteMsgId)
        && Objects.equals(origClOrdId, orther_.origClOrdId)
        && Objects.equals(execId, orther_.execId)
        && Objects.equals(execType, orther_.execType)
        && Objects.equals(ordStatus, orther_.ordStatus)
        && Objects.equals(ordRejReason, orther_.ordRejReason)
        && Objects.equals(leavesQty, orther_.leavesQty)
        && Objects.equals(cumQty, orther_.cumQty)
        && Objects.equals(side, orther_.side)
        && Objects.equals(ordType, orther_.ordType)
        && Objects.equals(orderQty, orther_.orderQty)
        && Objects.equals(price, orther_.price)
        && Objects.equals(accountId, orther_.accountId)
        && Objects.equals(branchId, orther_.branchId)
        && Objects.equals(orderRestrictions, orther_.orderRestrictions)
        && Objects.equals(applExtend, orther_.applExtend);
  }

  @Override
  public String toString() {
    return "ExecutionConfirm ["
        + "partitionNo="
        + this.partitionNo
        + ", reportIndex="
        + this.reportIndex
        + ", applId="
        + this.applId
        + ", reportingPbuid="
        + this.reportingPbuid
        + ", submittingPbuid="
        + this.submittingPbuid
        + ", securityId="
        + this.securityId
        + ", securityIdsource="
        + this.securityIdsource
        + ", ownerType="
        + this.ownerType
        + ", clearingFirm="
        + this.clearingFirm
        + ", transactTime="
        + this.transactTime
        + ", userInfo="
        + this.userInfo
        + ", orderId="
        + this.orderId
        + ", clOrdId="
        + this.clOrdId
        + ", quoteMsgId="
        + this.quoteMsgId
        + ", origClOrdId="
        + this.origClOrdId
        + ", execId="
        + this.execId
        + ", execType="
        + this.execType
        + ", ordStatus="
        + this.ordStatus
        + ", ordRejReason="
        + this.ordRejReason
        + ", leavesQty="
        + this.leavesQty
        + ", cumQty="
        + this.cumQty
        + ", side="
        + this.side
        + ", ordType="
        + this.ordType
        + ", orderQty="
        + this.orderQty
        + ", price="
        + this.price
        + ", accountId="
        + this.accountId
        + ", branchId="
        + this.branchId
        + ", orderRestrictions="
        + this.orderRestrictions
        + ", applExtend="
        + this.applExtend
        + "]";
  }

  public static enum ApplExtendMessageFactory {
    INSTANCE;
    private final Map<String, Supplier<BinaryCodec>> applExtendMap = new HashMap<>();

    static {
      getInstance().register("010", Extend200102::new);
      getInstance().register("020", Extend200202::new);
      getInstance().register("030", Extend200302::new);
      getInstance().register("051", Extend200502::new);
      getInstance().register("052", Extend200502::new);
      getInstance().register("060", Extend200602::new);
      getInstance().register("061", Extend200602::new);
      getInstance().register("070", Extend200702::new);
      getInstance().register("150", Extend201502::new);
      getInstance().register("151", Extend201502::new);
      getInstance().register("152", Extend201502::new);
      getInstance().register("160", Extend201602::new);
      getInstance().register("170", Extend201702::new);
      getInstance().register("180", Extend201802::new);
      getInstance().register("181", Extend201802::new);
      getInstance().register("270", Extend202702::new);
      getInstance().register("271", Extend202702::new);
      getInstance().register("280", Extend202802::new);
      getInstance().register("281", Extend202802::new);
      getInstance().register("290", Extend202902::new);
      getInstance().register("291", Extend202902::new);
      getInstance().register("630", Extend206302::new);
      getInstance().register("350", Extend203502::new);
      getInstance().register("351", Extend203502::new);
      getInstance().register("370", Extend203702::new);
      getInstance().register("410", Extend204102::new);
      getInstance().register("417", Extend204129::new);
      getInstance().register("470", Extend204702::new);
    }

    public BinaryCodec create(String applId) {
      Supplier<BinaryCodec> supplier = applExtendMap.get(applId);
      if (null == supplier) {
        throw new IllegalArgumentException("Unsupported ApplID:" + applId);
      }
      return supplier.get();
    }

    public void register(String applId, Supplier<BinaryCodec> supplier) {
      applExtendMap.put(applId, supplier);
    }

    public boolean remove(String applId) {
      return null != applExtendMap.remove(applId);
    }

    public static ApplExtendMessageFactory getInstance() {
      return INSTANCE;
    }
  }
}
